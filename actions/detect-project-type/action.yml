name: 'Detect Project Type'
description: 'Analyze a .NET project file to determine if it should be packed as a NuGet package or published as an application'
author: 'sandre58'

inputs:
  project-path:
    description: 'Path to the .csproj file'
    required: true

outputs:
  project-type:
    description: 'Type of project: "library" for NuGet packages, "application" for publishable apps'
    value: ${{ steps.detect.outputs.project-type }}
  output-type:
    description: 'OutputType from the project file (Exe, WinExe, Library, etc.)'
    value: ${{ steps.detect.outputs.output-type }}
  target-framework:
    description: 'Target framework of the project'
    value: ${{ steps.detect.outputs.target-framework }}

runs:
  using: 'composite'
  steps:
  - name: Detect project type
    id: detect
    shell: bash
    run: |
      set -euo pipefail

      csproj_file="${{ inputs.project-path }}"
      if [[ ! -f "$csproj_file" ]]; then
        echo "Error: Project file not found: $csproj_file"
        exit 1
      fi
      echo "::group::Searching for Directory.Build.props up from $(dirname "$csproj_file")"

      project_dir="$(dirname "$csproj_file")"
      current_dir="$project_dir"
      found_props=""
      while true; do
        if [[ -f "$current_dir/Directory.Build.props" ]]; then
          found_props="$current_dir/Directory.Build.props"
          echo "Found: $found_props"
          break
        fi
        parent_dir="$(dirname "$current_dir")"
        # stop if we can't go further
        if [[ "$current_dir" == "$parent_dir" || "$current_dir" == "/" || -z "$current_dir" ]]; then
          break
        fi
        current_dir="$parent_dir"
      done

      if [[ -z "$found_props" ]]; then
        echo "No Directory.Build.props found â€” will fallback to the .csproj file"
        found_props="$csproj_file"
      fi
      echo "::endgroup::"

      # Ensure xmllint is available (more reliable than grep for XML)
      if ! command -v xmllint >/dev/null 2>&1; then
        echo "xmllint not found -> installing libxml2-utils"
        sudo apt-get update -y
        sudo apt-get install -y libxml2-utils
      fi

      # Helper: extract a property using xmllint (handles namespaces & multiline)
      extract_prop() {
        local file="$1"
        local prop="$2"
        # use local-name() to be robust against namespaces
        xmllint --xpath "string(//PropertyGroup/*[local-name()='$prop'][1])" "$file" 2>/dev/null || true
      }

      # Get OutputType (first try Directory.Build.props, then .csproj)
      output_type="$(extract_prop "$found_props" "OutputType")"
      if [[ -z "$output_type" ]]; then
        output_type="$(extract_prop "$csproj_file" "OutputType")"
      fi
      if [[ -z "$output_type" ]]; then
        output_type="library"
      fi
      echo "OutputType = '$output_type'"

      # Get TargetFramework or first from TargetFrameworks (prefer Directory.Build.props)
      target_framework="$(extract_prop "$found_props" "TargetFramework")"
      if [[ -z "$target_framework" ]]; then
        target_frameworks="$(extract_prop "$found_props" "TargetFrameworks")"
        if [[ -n "$target_frameworks" ]]; then
          # remove whitespace and take first ; separated framework
          target_framework="$(echo "$target_frameworks" | tr -d '[:space:]' | cut -d';' -f1)"
        fi
      fi
      # fallback: try .csproj if still empty
      if [[ -z "$target_framework" ]]; then
        target_framework="$(extract_prop "$csproj_file" "TargetFramework")"
        if [[ -z "$target_framework" ]]; then
          tfs="$(extract_prop "$csproj_file" "TargetFrameworks")"
          if [[ -n "$tfs" ]]; then
            target_framework="$(echo "$tfs" | tr -d '[:space:]' | cut -d';' -f1)"
          fi
        fi
      fi

      echo "TargetFramework = '$target_framework'"

      # Determine project type
      project_type="library"
      if [[ "$output_type" == "Exe" || "$output_type" == "WinExe" ]]; then
        project_type="application"
      fi

      # Also consider SDK attribute (web/worker)
      sdk_attr="$(xmllint --xpath "string(/Project/@Sdk)" "$csproj_file" 2>/dev/null || true)"
      if [[ -n "$sdk_attr" ]]; then
        if [[ "$sdk_attr" == *"Microsoft.NET.Sdk.Web"* || "$sdk_attr" == *"Microsoft.NET.Sdk.Worker"* ]]; then
          project_type="application"
        fi
      fi

      echo "Determined project_type='$project_type', output_type='$output_type', target_framework='$target_framework'"

      # Set outputs
      echo "project-type=$project_type" >> $GITHUB_OUTPUT
      echo "output-type=$output_type" >> $GITHUB_OUTPUT
      echo "target-framework=$target_framework" >> $GITHUB_OUTPUT