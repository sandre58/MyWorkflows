name: CI

on:
  workflow_call:
    inputs:
      nuget-projects:
        description: "List of csproj files to pack (newline separated)"
        type: string
        required: false
        default: 'src'
      app-projects:
        description: "List of csproj files to publish (newline separated)"
        type: string
        required: false
        default: 'demos'
      app-output:
        description: "Output directory for published apps"
        type: string
        required: false
        default: 'published-apps'
      tests-path:
        description: "Path to search for test files"
        type: string
        default: 'TestResults'
      tag-pattern:
        description: "Pattern for tag names, e.g. {project}/v{version} or v{version}"
        type: string
        required: false
        default: '{project}/v{version}'
      dotnet-versions:
        description: "Versions of .NET to install"
        type: string
        default: |
          10.0.x
          9.0.x
          8.0.x
      runsettings-file:
        description: "Path to .runsettings file for test configuration"
        type: string
        required: false
        default: '.runsettings'
      compute-versions:
        description: "Whether to compute versions automatically using semantic versioning"
        type: boolean
        default: true

permissions:
  checks: write        # Required to publish test results
  actions: read        # Required to read workflow runs
  contents: write      # Required to checkout code and push to gh-pages
  pages: write         # Required to publish to GitHub Pages

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  discover-projects:
    runs-on: ubuntu-latest
    outputs:
      version-projects-matrix: ${{ steps.find-projects.outputs.projects-matrix }}
      nuget-projects-matrix: ${{ steps.find-nuget-projects.outputs.projects-matrix }}
      app-projects-matrix: ${{ steps.find-app-projects.outputs.projects-matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Find all nugets projects
        id: find-nuget-projects
        uses: sandre58/MyWorkflows/actions/find-projects@main
        with:
          project-paths: ${{ inputs.nuget-projects }}

      - name: Find all app projects
        id: find-app-projects
        uses: sandre58/MyWorkflows/actions/find-projects@main
        with:
            project-paths: ${{ inputs.app-projects }}

      - name: Merge nuget and app projects
        id: find-projects
        shell: bash
        run: |
          nuget_projects='${{ steps.find-nuget-projects.outputs.projects }}'
          app_projects='${{ steps.find-app-projects.outputs.projects }}'
          
          # Merge project lists (comma-separated strings)
          merged_projects=""
          if [ -n "$nuget_projects" ] && [ "$nuget_projects" != "" ] && [ "$nuget_projects" != "null" ]; then
            merged_projects="$nuget_projects"
          fi
          if [ -n "$app_projects" ] && [ "$app_projects" != "" ] && [ "$app_projects" != "null" ]; then
            if [ -n "$merged_projects" ]; then
              merged_projects="$merged_projects,$app_projects"
            else
              merged_projects="$app_projects"
            fi
          fi
          
          echo "Merged projects: $merged_projects"
          echo "projects=$merged_projects" >> $GITHUB_OUTPUT

          # Get matrices
          nuget_matrix='${{ steps.find-nuget-projects.outputs.projects-matrix }}'
          app_matrix='${{ steps.find-app-projects.outputs.projects-matrix }}'

          echo "Raw nuget matrix: $nuget_matrix"
          echo "Raw app matrix: $app_matrix"

          # Handle empty or null matrices and validate JSON
          if [ "$nuget_matrix" = "" ] || [ "$nuget_matrix" = "null" ] || ! echo "$nuget_matrix" | jq . >/dev/null 2>&1; then
            nuget_matrix='{"include":[]}'
          fi
          if [ "$app_matrix" = "" ] || [ "$app_matrix" = "null" ] || ! echo "$app_matrix" | jq . >/dev/null 2>&1; then
            app_matrix='{"include":[]}'
          fi
          
          echo "Cleaned nuget matrix: $nuget_matrix"
          echo "Cleaned app matrix: $app_matrix"
          
          # Merge matrices by combining the include arrays
          merged_matrix=$(echo "$nuget_matrix $app_matrix" | jq -s '{"include": (.[0].include + .[1].include)}')
          echo "Merged matrix: $merged_matrix"

          # Compact the JSON to avoid formatting issues with GITHUB_OUTPUT
          matrix_json_compact=$(echo "$merged_matrix" | jq -c .)
          echo "projects-matrix=$matrix_json_compact" >> $GITHUB_OUTPUT

  set-versions:
    runs-on: ubuntu-latest
    needs: discover-projects
    if: inputs.compute-versions == true
    strategy:
      matrix: ${{ fromJson(needs.discover-projects.outputs.version-projects-matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Calculate tag pattern for ${{ matrix.name }}
        id: calculate-tag-pattern
        shell: bash
        run: |
          tag_pattern="${{ inputs.tag-pattern }}"
          project_tag_pattern="${tag_pattern//\{project\}/${{ matrix.name }}}"
          echo "tag-pattern=$project_tag_pattern" >> $GITHUB_OUTPUT

      - name: Compute version for ${{ matrix.name }}
        id: version
        uses: sandre58/MyWorkflows/actions/compute-version@main
        with:
          tag-pattern: ${{ steps.calculate-tag-pattern.outputs.tag-pattern }}
          working-directory: ${{ matrix.dir }}

      - name: Set NBGV version for ${{ matrix.name }}
        uses: sandre58/MyWorkflows/actions/set-nbgv-version@main
        with:
          version: ${{ steps.version.outputs.version }}
          working-directory: ${{ matrix.dir }}
          project-name: ${{ matrix.name }}

      - name: Add NBGV package to ${{ matrix.name }}
        uses: sandre58/MyWorkflows/actions/add-nbgv-package@main
        with:
          dotnet-versions: ${{ inputs.dotnet-versions }}
          working-directory: ${{ matrix.dir }}
          project-name: ${{ matrix.name }}

      - name: Upload updated sources
        uses: actions/upload-artifact@v4
        with:
          name: updated-${{ matrix.name }}
          path:  |
            ${{ matrix.dir }}

  build-test-and-pack:
    runs-on: windows-latest  # Changed to Windows to support WPF projects
    needs: [discover-projects, set-versions]
    if: always() && needs.discover-projects.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          path: updated-projects

      - name: Restore updated files
        uses: sandre58/MyWorkflows/actions/restore-updated-files@main
        with:
          projects-matrix: ${{ needs.discover-projects.outputs.version-projects-matrix }}

      - name: Build and Test
        uses: sandre58/MyWorkflows/actions/build-and-test@main
        with:
          dotnet-versions: ${{ inputs.dotnet-versions }}
          runsettings-file: ${{ inputs.runsettings-file }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ inputs.tests-path }}/**/*

  pack-nugets:
    runs-on: windows-latest
    needs: discover-projects
    if: needs.discover-projects.outputs.nuget-projects-matrix != '{"include":[]}'
    strategy:
      matrix: ${{ fromJson(needs.discover-projects.outputs.nuget-projects-matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          path: updated-projects

      - name: Restore updated files
        uses: sandre58/MyWorkflows/actions/restore-updated-files@main
        with:
          projects-matrix: ${{ needs.discover-projects.outputs.nuget-projects-matrix }}

      - name: Pack ${{ matrix.name }}
        id: pack
        uses: sandre58/MyWorkflows/actions/nuget-pack@main
        with:
          project-path: ${{ matrix.path }}

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-nuget
          path: ${{ steps.pack.outputs.output-directory }}/${{ matrix.name }}-*.nupkg

  publish-apps:
    runs-on: windows-latest
    needs: discover-projects
    if: needs.discover-projects.outputs.app-projects-matrix != '{"include":[]}'
    strategy:
      matrix: ${{ fromJson(needs.discover-projects.outputs.app-projects-matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          path: updated-projects

      - name: Restore updated files
        uses: sandre58/MyWorkflows/actions/restore-updated-files@main
        with:
          projects-matrix: ${{ needs.discover-projects.outputs.app-projects-matrix }}

      - name: Publish ${{ matrix.name }}
        uses: sandre58/MyWorkflows/actions/publish@main
        with:
          project-path: ${{ matrix.path }}
          output-path: ${{ inputs.app-output }}/${{ matrix.name }}

  publish-reports:
    runs-on: ubuntu-latest
    needs: build-test-and-pack
    if: always() && needs.build-test-and-pack.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ${{ inputs.tests-path }}

      - name: Publish Coverage Report
        uses: codecov/codecov-action@v4
        with:
          files: ${{ inputs.tests-path }}/**/*.cobertura.xml
          fail_ci_if_error: false
          verbose: true

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '${{ inputs.tests-path }}/**/*.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'Html;MarkdownSummaryGithub'

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ inputs.tests-path }}/**/*.trx
          check_name: 'Test Results'
          comment_mode: changes
          fail_on: 'test failures'

      - name: Publish Markdown Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport

      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: coveragereport